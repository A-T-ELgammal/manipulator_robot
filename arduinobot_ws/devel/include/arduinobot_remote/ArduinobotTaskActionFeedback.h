// Generated by gencpp from file arduinobot_remote/ArduinobotTaskActionFeedback.msg
// DO NOT EDIT!


#ifndef ARDUINOBOT_REMOTE_MESSAGE_ARDUINOBOTTASKACTIONFEEDBACK_H
#define ARDUINOBOT_REMOTE_MESSAGE_ARDUINOBOTTASKACTIONFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arduinobot_remote
{
template <class ContainerAllocator>
struct ArduinobotTaskActionFeedback_
{
  typedef ArduinobotTaskActionFeedback_<ContainerAllocator> Type;

  ArduinobotTaskActionFeedback_()
    : percentage(0)  {
    }
  ArduinobotTaskActionFeedback_(const ContainerAllocator& _alloc)
    : percentage(0)  {
  (void)_alloc;
    }



   typedef int64_t _percentage_type;
  _percentage_type percentage;





  typedef boost::shared_ptr< ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ArduinobotTaskActionFeedback_

typedef ::arduinobot_remote::ArduinobotTaskActionFeedback_<std::allocator<void> > ArduinobotTaskActionFeedback;

typedef boost::shared_ptr< ::arduinobot_remote::ArduinobotTaskActionFeedback > ArduinobotTaskActionFeedbackPtr;
typedef boost::shared_ptr< ::arduinobot_remote::ArduinobotTaskActionFeedback const> ArduinobotTaskActionFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator1> & lhs, const ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.percentage == rhs.percentage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator1> & lhs, const ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arduinobot_remote

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "face31f38d20abbde445df7aa912bb07";
  }

  static const char* value(const ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xface31f38d20abbdULL;
  static const uint64_t static_value2 = 0xe445df7aa912bb07ULL;
};

template<class ContainerAllocator>
struct DataType< ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arduinobot_remote/ArduinobotTaskActionFeedback";
  }

  static const char* value(const ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Feedback\n"
"int64 percentage\n"
"\n"
;
  }

  static const char* value(const ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.percentage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArduinobotTaskActionFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arduinobot_remote::ArduinobotTaskActionFeedback_<ContainerAllocator>& v)
  {
    s << indent << "percentage: ";
    Printer<int64_t>::stream(s, indent + "  ", v.percentage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDUINOBOT_REMOTE_MESSAGE_ARDUINOBOTTASKACTIONFEEDBACK_H
