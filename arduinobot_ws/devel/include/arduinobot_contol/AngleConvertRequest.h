// Generated by gencpp from file arduinobot_controller/AngleConvertRequest.msg
// DO NOT EDIT!


#ifndef arduinobot_controller_MESSAGE_ANGLECONVERTREQUEST_H
#define arduinobot_controller_MESSAGE_ANGLECONVERTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arduinobot_controller
{
template <class ContainerAllocator>
struct AngleConvertRequest_
{
  typedef AngleConvertRequest_<ContainerAllocator> Type;

  AngleConvertRequest_()
    : base(0.0)
    , shoulder(0.0)
    , elbow(0.0)
    , gripper(0.0)  {
    }
  AngleConvertRequest_(const ContainerAllocator& _alloc)
    : base(0.0)
    , shoulder(0.0)
    , elbow(0.0)
    , gripper(0.0)  {
  (void)_alloc;
    }



   typedef double _base_type;
  _base_type base;

   typedef double _shoulder_type;
  _shoulder_type shoulder;

   typedef double _elbow_type;
  _elbow_type elbow;

   typedef double _gripper_type;
  _gripper_type gripper;





  typedef boost::shared_ptr< ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AngleConvertRequest_

typedef ::arduinobot_controller::AngleConvertRequest_<std::allocator<void> > AngleConvertRequest;

typedef boost::shared_ptr< ::arduinobot_controller::AngleConvertRequest > AngleConvertRequestPtr;
typedef boost::shared_ptr< ::arduinobot_controller::AngleConvertRequest const> AngleConvertRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator1> & lhs, const ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator2> & rhs)
{
  return lhs.base == rhs.base &&
    lhs.shoulder == rhs.shoulder &&
    lhs.elbow == rhs.elbow &&
    lhs.gripper == rhs.gripper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator1> & lhs, const ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arduinobot_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "19b04e0ebe735f18fbbd5aea9d85b833";
  }

  static const char* value(const ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x19b04e0ebe735f18ULL;
  static const uint64_t static_value2 = 0xfbbd5aea9d85b833ULL;
};

template<class ContainerAllocator>
struct DataType< ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arduinobot_controller/AngleConvertRequest";
  }

  static const char* value(const ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Rrequest \n"
"float64 base \n"
"float64 shoulder \n"
"float64 elbow \n"
"float64 gripper \n"
;
  }

  static const char* value(const ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.base);
      stream.next(m.shoulder);
      stream.next(m.elbow);
      stream.next(m.gripper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AngleConvertRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arduinobot_controller::AngleConvertRequest_<ContainerAllocator>& v)
  {
    s << indent << "base: ";
    Printer<double>::stream(s, indent + "  ", v.base);
    s << indent << "shoulder: ";
    Printer<double>::stream(s, indent + "  ", v.shoulder);
    s << indent << "elbow: ";
    Printer<double>::stream(s, indent + "  ", v.elbow);
    s << indent << "gripper: ";
    Printer<double>::stream(s, indent + "  ", v.gripper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // arduinobot_controller_MESSAGE_ANGLECONVERTREQUEST_H
