// Generated by gencpp from file arduinobot_controller/AngleConvert.msg
// DO NOT EDIT!


#ifndef ARDUINOBOT_CONTROLLER_MESSAGE_ANGLECONVERT_H
#define ARDUINOBOT_CONTROLLER_MESSAGE_ANGLECONVERT_H

#include <ros/service_traits.h>


#include <arduinobot_controller/AngleConvertRequest.h>
#include <arduinobot_controller/AngleConvertResponse.h>


namespace arduinobot_controller
{

struct AngleConvert
{

typedef AngleConvertRequest Request;
typedef AngleConvertResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct AngleConvert
} // namespace arduinobot_controller


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::arduinobot_controller::AngleConvert > {
  static const char* value()
  {
    return "904e8346ace63ec441f6f58d8efc6687";
  }

  static const char* value(const ::arduinobot_controller::AngleConvert&) { return value(); }
};

template<>
struct DataType< ::arduinobot_controller::AngleConvert > {
  static const char* value()
  {
    return "arduinobot_controller/AngleConvert";
  }

  static const char* value(const ::arduinobot_controller::AngleConvert&) { return value(); }
};


// service_traits::MD5Sum< ::arduinobot_controller::AngleConvertRequest> should match
// service_traits::MD5Sum< ::arduinobot_controller::AngleConvert >
template<>
struct MD5Sum< ::arduinobot_controller::AngleConvertRequest>
{
  static const char* value()
  {
    return MD5Sum< ::arduinobot_controller::AngleConvert >::value();
  }
  static const char* value(const ::arduinobot_controller::AngleConvertRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::arduinobot_controller::AngleConvertRequest> should match
// service_traits::DataType< ::arduinobot_controller::AngleConvert >
template<>
struct DataType< ::arduinobot_controller::AngleConvertRequest>
{
  static const char* value()
  {
    return DataType< ::arduinobot_controller::AngleConvert >::value();
  }
  static const char* value(const ::arduinobot_controller::AngleConvertRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::arduinobot_controller::AngleConvertResponse> should match
// service_traits::MD5Sum< ::arduinobot_controller::AngleConvert >
template<>
struct MD5Sum< ::arduinobot_controller::AngleConvertResponse>
{
  static const char* value()
  {
    return MD5Sum< ::arduinobot_controller::AngleConvert >::value();
  }
  static const char* value(const ::arduinobot_controller::AngleConvertResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::arduinobot_controller::AngleConvertResponse> should match
// service_traits::DataType< ::arduinobot_controller::AngleConvert >
template<>
struct DataType< ::arduinobot_controller::AngleConvertResponse>
{
  static const char* value()
  {
    return DataType< ::arduinobot_controller::AngleConvert >::value();
  }
  static const char* value(const ::arduinobot_controller::AngleConvertResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // ARDUINOBOT_CONTROLLER_MESSAGE_ANGLECONVERT_H
